"""
Script di test per verificare che tutte le librerie funzionino correttamente
"""

def test_imports():
    """Test delle importazioni"""
    try:
        print("üîç Testando importazioni...")
        
        import pandas as pd
        print("‚úÖ pandas importato con successo")
        
        import numpy as np
        print("‚úÖ numpy importato con successo")
        
        import matplotlib.pyplot as plt
        print("‚úÖ matplotlib importato con successo")
        
        import requests
        print("‚úÖ requests importato con successo")
        
        import ccxt
        print("‚úÖ ccxt importato con successo")
        
        # import pandas_ta as ta
        # print("‚úÖ pandas_ta importato con successo")
        print("‚úÖ Indicatori tecnici (implementazione custom)")
        
        from telegram import Update
        from telegram.ext import Application
        print("‚úÖ python-telegram-bot importato con successo")
        
        from dotenv import load_dotenv
        print("‚úÖ python-dotenv importato con successo")
        
        print("\nüéâ Tutti i pacchetti sono installati correttamente!")
        return True
        
    except ImportError as e:
        print(f"‚ùå Errore importazione: {e}")
        return False

def test_basic_functionality():
    """Test funzionalit√† di base"""
    try:
        print("\nüîç Testando funzionalit√† di base...")
        
        # Test pandas e numpy
        import pandas as pd
        import numpy as np
        df = pd.DataFrame({
            'close': np.random.rand(100) * 100 + 50,
            'volume': np.random.rand(100) * 1000000
        })
        print("‚úÖ DataFrame pandas creato")
        
        # Test indicatori tecnici custom
        from crypto_bot import calculate_rsi, calculate_macd
        rsi = calculate_rsi(df['close'], 14)
        macd_data = calculate_macd(df['close'])
        print("‚úÖ Indicatori tecnici calcolati")
        
        # Test matplotlib
        import matplotlib.pyplot as plt
        plt.figure(figsize=(8, 6))
        plt.plot(df['close'][:20])
        plt.title('Test Grafico')
        plt.close()
        print("‚úÖ Grafico matplotlib creato")
        
        # Test CCXT (senza connessione)
        import ccxt
        exchange = ccxt.binance({
            'apiKey': '',
            'secret': '',
            'timeout': 30000,
            'enableRateLimit': True,
        })
        print("‚úÖ Exchange CCXT inizializzato")
        
        print("\nüéâ Test funzionalit√† completato con successo!")
        return True
        
    except Exception as e:
        print(f"‚ùå Errore test funzionalit√†: {e}")
        return False

def main():
    """Funzione principale di test"""
    print("ü§ñ Test Bot Telegram Analisi Crypto")
    print("=" * 50)
    
    # Test importazioni
    if not test_imports():
        print("\n‚ùå Test falliti - controllare le installazioni")
        return
    
    # Test funzionalit√†
    if not test_basic_functionality():
        print("\n‚ùå Test funzionalit√† falliti")
        return
    
    print("\n" + "=" * 50)
    print("‚úÖ TUTTI I TEST COMPLETATI CON SUCCESSO!")
    print("\nüìã Prossimi passi:")
    print("1. Ottenere token Telegram da @BotFather")
    print("2. (Opzionale) Ottenere token CryptoPanic")
    print("3. Creare file .env con i token")
    print("4. Eseguire crypto_bot.py")
    print("\nüöÄ Il bot √® pronto per l'uso!")

if __name__ == "__main__":
    main()
